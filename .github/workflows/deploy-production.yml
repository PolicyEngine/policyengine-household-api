name: 'Deployment step 2: Deploy to Production'

on:
  push:
    branches: [ main ]

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
  REGION: us-central1
  SERVICE_NAME: policyengine-household-api
  IMAGE_NAME: ghcr.io/policyengine-household-api/policyengine-household-api
  PYTHON_VERSION: '3.12'

jobs:
  lint-and-test:
    name: Lint and test
    runs-on: ubuntu-latest
    if: |
      (github.repository == 'PolicyEngine/policyengine-household-api')
      && (github.event.head_commit.message == 'Update PolicyEngine Household API')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: make install

      - name: Run linter
        run: make format

      - name: Run tests
        run: make test

  build-docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    if: |
      (github.repository == 'PolicyEngine/policyengine-household-api')
      && (github.event.head_commit.message == 'Update PolicyEngine Household API')
    needs: [lint-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=python${{ env.PYTHON_VERSION }},enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/production/Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify image was pushed
        run: |
          echo "Verifying image was pushed to GitHub Container Registry..."
          docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "âœ… Image successfully pushed and can be pulled"

  # Deploy to App Engine using pre-built Docker image from GitHub Container Registry
  deploy:
    runs-on: ubuntu-latest
    if: |
      (github.repository == 'PolicyEngine/policyengine-household-api')
      && (github.event.head_commit.message == 'Update PolicyEngine Household API')
    needs: [lint-and-test, build-docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Log in to GitHub Container Registry for image verification
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify image exists before deployment
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: .github/scripts/verify-image.sh

      - name: Deploy to App Engine
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          SERVICE_ACCOUNT: github-deployment@policyengine-household-api.iam.gserviceaccount.com
          APP_YAML_PATH: ./gcp/policyengine_household_api/app.yaml
        run: .github/scripts/deploy-app-engine.sh

      - name: Set traffic to new version
        env:
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          VERSION: ${{ github.sha }}
        run: .github/scripts/set-traffic.sh

      - name: Verify deployment
        env:
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
        run: .github/scripts/verify-deployment.sh
